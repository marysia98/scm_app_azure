# Generated by Django 3.1.2 on 2021-02-02 21:14

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'admin'), (2, 'producent'), (3, 'nabywca')], verbose_name='typ użytkownika')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(verbose_name='numer okresu')),
            ],
            options={
                'verbose_name': 'okres w harmonogramie',
                'verbose_name_plural': 'Okresy w harmonogramie',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='tytuł aukcji')),
                ('description', models.CharField(default='', max_length=400, verbose_name='opis')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'nieaktywny'), (1, 'aktywny')], default=0)),
                ('schedule_beginning', models.DateField(default=datetime.date(2021, 2, 3), verbose_name='start harmonogramu')),
                ('periods_amount', models.PositiveSmallIntegerField(verbose_name='liczba okresów')),
                ('period_length', models.PositiveSmallIntegerField(verbose_name='długość okresu')),
                ('plan_type', models.PositiveSmallIntegerField(choices=[(0, 'poufna'), (1, 'publiczna')], default=0, verbose_name='typ planu')),
                ('price_type', models.PositiveSmallIntegerField(choices=[(0, 'jednakowa'), (1, 'zróżnicowana')], default=0, verbose_name='typ ceny')),
                ('start_date', models.DateField(default=datetime.date.today, verbose_name='początek zbierania ofert')),
                ('end_date', models.DateField(default=datetime.date.today, verbose_name='zakończenie zbierania ofert')),
                ('administrator', models.ForeignKey(limit_choices_to={'user_type': 1}, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Aukcja',
                'verbose_name_plural': 'Aukcje',
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='harmonogram', max_length=100, verbose_name='nazwa harmonogramu')),
                ('plan', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='solution', to='scm_app.plan', verbose_name='aukcja')),
            ],
            options={
                'verbose_name': 'Harmonogram',
                'verbose_name_plural': 'Harmonogramy',
            },
        ),
        migrations.CreateModel(
            name='SalesOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(null=True, verbose_name='numer oferty')),
                ('setup_cost', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='koszt początkowy')),
                ('stock_level', models.DecimalField(blank=True, decimal_places=0, default=0, max_digits=5, null=True, verbose_name='stan magazynu')),
                ('stock_cost', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=4, null=True, verbose_name='koszt magazynowania')),
                ('max_stock_capacity', models.DecimalField(blank=True, decimal_places=0, default=0, max_digits=4, null=True, verbose_name='maksymalna pojemność magazynu')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_offers', to='scm_app.plan', verbose_name='plan')),
                ('producer', models.ForeignKey(limit_choices_to={'user_type': 2}, on_delete=django.db.models.deletion.PROTECT, related_name='sales_offers', to=settings.AUTH_USER_MODEL, verbose_name='producent')),
            ],
            options={
                'verbose_name': 'Oferta sprzedaży',
                'verbose_name_plural': 'Oferty sprzedaży',
                'db_table': 'SalesOffer',
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production_amount', models.PositiveSmallIntegerField(verbose_name='wielkość produkcji')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='cena sprzedaży')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales', to='scm_app.period', verbose_name='okres')),
                ('producer', models.ForeignKey(limit_choices_to={'user_type': 2}, on_delete=django.db.models.deletion.PROTECT, related_name='sales', to=settings.AUTH_USER_MODEL, verbose_name='producent')),
            ],
            options={
                'verbose_name': 'Sprzedaż',
                'verbose_name_plural': 'Sprzedaż',
            },
        ),
        migrations.CreateModel(
            name='PurchaseOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(verbose_name='numer oferty')),
                ('retail_unit_price', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='cena kupna')),
                ('stock_level', models.DecimalField(blank=True, decimal_places=0, max_digits=5, null=True, verbose_name='stan magazynu')),
                ('stock_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='koszt magazynowania')),
                ('max_stock_capacity', models.DecimalField(blank=True, decimal_places=0, max_digits=4, null=True, verbose_name='maksymalna pojemność magazynu')),
                ('buyer', models.ForeignKey(limit_choices_to={'user_type': 3}, on_delete=django.db.models.deletion.PROTECT, related_name='purchase_offers', to=settings.AUTH_USER_MODEL, verbose_name='nabywca')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_offers', to='scm_app.plan', verbose_name='plan')),
            ],
            options={
                'verbose_name': 'Oferta kupna',
                'verbose_name_plural': 'Oferty kupna',
            },
        ),
        migrations.CreateModel(
            name='ProductionCapacity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production_level', models.PositiveSmallIntegerField(verbose_name='wielkość produkcji')),
                ('production_cost', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='koszt produkcji')),
                ('sales_offer', models.ForeignKey(default=3, on_delete=django.db.models.deletion.CASCADE, related_name='production_capacities', to='scm_app.salesoffer', verbose_name='oferta sprzedaży')),
            ],
            options={
                'verbose_name': 'Oferowana wielkość sprzedaży',
                'verbose_name_plural': 'Oferowane wielkości sprzedaży',
            },
        ),
        migrations.AddField(
            model_name='period',
            name='solution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='solution_periods', to='scm_app.solution', verbose_name='harmonogram'),
        ),
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(default=1, editable=False, verbose_name='numer okresu')),
                ('demand', models.PositiveSmallIntegerField(default=0, verbose_name='zapotrzebowanie')),
                ('purchase_offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demands', to='scm_app.purchaseoffer', verbose_name='oferta kupna')),
            ],
            options={
                'verbose_name': 'Zapotrzebowanie',
                'verbose_name_plural': 'Zapotrzebowania',
            },
        ),
        migrations.CreateModel(
            name='Buying',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_amount', models.PositiveSmallIntegerField(verbose_name='wielkość zamówienia')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='cena kupna')),
                ('buyer', models.ForeignKey(limit_choices_to={'user_type': 3}, on_delete=django.db.models.deletion.PROTECT, related_name='purchases', to=settings.AUTH_USER_MODEL, verbose_name='nabywca')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchases', to='scm_app.period', verbose_name='okres')),
            ],
            options={
                'verbose_name': 'Kupno',
                'verbose_name_plural': 'Kupno',
            },
        ),
    ]
